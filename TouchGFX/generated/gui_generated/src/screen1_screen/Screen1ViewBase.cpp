/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    updateItemCallback(this, &Screen1ViewBase::updateItemCallbackHandler),
    sliderValueConfirmedCallback(this, &Screen1ViewBase::sliderValueConfirmedCallbackHandler),
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_GRADIENT_DARK_ID));
    add(background);

    scrollWheel.setPosition(280, 0, 180, 272);
    scrollWheel.setHorizontal(false);
    scrollWheel.setCircular(true);
    scrollWheel.setEasingEquation(touchgfx::EasingEquations::quintEaseOut);
    scrollWheel.setSwipeAcceleration(50);
    scrollWheel.setDragAcceleration(10);
    scrollWheel.setNumberOfItems(12);
    scrollWheel.setSelectedItemOffset(0);
    scrollWheel.setOvershootPercentage(0);
    scrollWheel.setDrawableSize(272, 0);
    scrollWheel.setDrawables(scrollWheelListItems, updateItemCallback);
    scrollWheel.animateToItem(0, 0);
    add(scrollWheel);

    priceLabel.setXY(40, 30);
    priceLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    priceLabel.setLinespacing(0);
    priceLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EMQ9));
    add(priceLabel);

    typeLabel.setXY(40, 60);
    typeLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    typeLabel.setLinespacing(0);
    typeLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I5UR));
    add(typeLabel);

    intensityLabel.setXY(40, 90);
    intensityLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    intensityLabel.setLinespacing(0);
    intensityLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YNNN));
    add(intensityLabel);

    roastlevelLabel.setXY(40, 120);
    roastlevelLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    roastlevelLabel.setLinespacing(0);
    roastlevelLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VL6B));
    add(roastlevelLabel);

    price.setXY(170, 30);
    price.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    price.setLinespacing(0);
    Unicode::snprintf(priceBuffer, PRICE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7YIG).getText());
    price.setWildcard(priceBuffer);
    price.resizeToCurrentText();
    price.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O3GB));
    add(price);

    type.setXY(170, 60);
    type.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    type.setLinespacing(0);
    Unicode::snprintf(typeBuffer, TYPE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LBY8).getText());
    type.setWildcard(typeBuffer);
    type.resizeToCurrentText();
    type.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TLWP));
    add(type);

    intensity.setXY(170, 90);
    intensity.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    intensity.setLinespacing(0);
    Unicode::snprintf(intensityBuffer, INTENSITY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KT9T).getText());
    intensity.setWildcard(intensityBuffer);
    intensity.resizeToCurrentText();
    intensity.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZGCT));
    add(intensity);

    roastlevel.setXY(170, 120);
    roastlevel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    roastlevel.setLinespacing(0);
    Unicode::snprintf(roastlevelBuffer, ROASTLEVEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U6NK).getText());
    roastlevel.setWildcard(roastlevelBuffer);
    roastlevel.resizeToCurrentText();
    roastlevel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RDLM));
    add(roastlevel);

    sugarLevelLabel.setXY(40, 150);
    sugarLevelLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    sugarLevelLabel.setLinespacing(0);
    sugarLevelLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UTCC));
    add(sugarLevelLabel);

    slider.setXY(37, 180);
    slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    slider.setupHorizontalSlider(16, 11, 0, 0, 200);
    slider.setValueRange(0, 300);
    slider.setValue(0);
    slider.setStopValueCallback(sliderValueConfirmedCallback);
    add(slider);

    sugarLevel.setPosition(170, 150, 39, 24);
    sugarLevel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    sugarLevel.setLinespacing(0);
    Unicode::snprintf(sugarLevelBuffer, SUGARLEVEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_11WB).getText());
    sugarLevel.setWildcard(sugarLevelBuffer);
    sugarLevel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0IC7));
    add(sugarLevel);

    makeCoffeeButton.setXY(84, 220);
    makeCoffeeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_PRESSED_ID));
    makeCoffeeButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_POCX));
    makeCoffeeButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    makeCoffeeButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    makeCoffeeButton.setAction(buttonCallback);
    add(makeCoffeeButton);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{
    scrollWheel.initialize();
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelListItems[i].initialize();
    }
}

void Screen1ViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider)
    {
        //moveSlider
        //When slider value confirmed execute C++ code
        //Execute C++ code
        int level = 0;
        if(value <= 45)
            level = 0;
        if(45 < value && value <= 90)
            level = 1;
        if(90 < value && value <= 150)
            level = 2;
        if(150 < value && value <= 210)
            level = 3;
        if(210 < value && value <= 255)
            level = 4;
        if(value > 255)
            level = 5;
        
        presenter->setSugarLevel(level);
        Unicode::snprintf(sugarLevelBuffer, 2, "%d", level);
        
        slider.setValue(level*60);
        sugarLevel.invalidate();
    }
}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &makeCoffeeButton)
    {
        //clickButton
        //When makeCoffeeButton clicked call virtual function
        //Call makeTheCoffee
        makeTheCoffee();
    }
}

void Screen1ViewBase::goToPrepairingScreen()
{
    //goToPrepairing
    //When goToPrepairingScreen is called change screen to Prepairing
    //Go to Prepairing with screen transition towards East
    application().gotoPrepairingScreenSlideTransitionEast();
}

void Screen1ViewBase::goToWelcomeScreen()
{
    //timeout
    //When goToWelcomeScreen is called change screen to WelcomeScreen
    //Go to WelcomeScreen with no screen transition
    application().gotoWelcomeScreenScreenNoTransition();
}

void Screen1ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        MenuElement* cc = (MenuElement*)d;
        scrollWheelUpdateItem(*cc, itemIndex);
    }
}
