/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/MenuElement.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <algorithm>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    virtual void scrollWheelUpdateItem(MenuElement& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }

    /*
     * Custom Actions
     */
    virtual void goToPrepairingScreen();
    virtual void goToWelcomeScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void makeTheCoffee()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ClickListener< touchgfx::Image > background;
    touchgfx::ScrollWheel scrollWheel;
    touchgfx::DrawableListItems<MenuElement, 2> scrollWheelListItems;
    touchgfx::TextArea priceLabel;
    touchgfx::TextArea typeLabel;
    touchgfx::TextArea intensityLabel;
    touchgfx::TextArea roastlevelLabel;
    touchgfx::TextAreaWithOneWildcard price;
    touchgfx::TextAreaWithOneWildcard type;
    touchgfx::TextAreaWithOneWildcard intensity;
    touchgfx::TextAreaWithOneWildcard roastlevel;
    touchgfx::TextArea sugarLevelLabel;
    touchgfx::Slider slider;
    touchgfx::TextAreaWithOneWildcard sugarLevel;
    touchgfx::ButtonWithLabel makeCoffeeButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PRICE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar priceBuffer[PRICE_SIZE];
    static const uint16_t TYPE_SIZE = 8;
    touchgfx::Unicode::UnicodeChar typeBuffer[TYPE_SIZE];
    static const uint16_t INTENSITY_SIZE = 3;
    touchgfx::Unicode::UnicodeChar intensityBuffer[INTENSITY_SIZE];
    static const uint16_t ROASTLEVEL_SIZE = 7;
    touchgfx::Unicode::UnicodeChar roastlevelBuffer[ROASTLEVEL_SIZE];
    static const uint16_t SUGARLEVEL_SIZE = 2;
    touchgfx::Unicode::UnicodeChar sugarLevelBuffer[SUGARLEVEL_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN1VIEWBASE_HPP
